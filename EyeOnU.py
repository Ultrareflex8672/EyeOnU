# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '123.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, QTimer
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QMessageBox
from updater import Updater
import sys
import cv2
import numpy as np
import time
import os
import requests
from datetime import datetime
import webbrowser
import json
import subprocess
import shutil

if getattr(sys, 'frozen', False):  
    application_path = sys._MEIPASS
else:
    application_path = os.path.dirname(__file__)

MODEL_CONFIG = os.path.join(application_path, "yolov4.cfg")
MODEL_WEIGHTS = os.path.join(application_path, "yolov4.weights")
MODEL_NAMES = os.path.join(application_path, "coco.names")

class Ui_eyeonu(object):
    def __init__(self):
        super().__init__()
        eyeonu = QtWidgets.QMainWindow()
        self.updater = Updater()
        self.new_version, self.current_version = self.updater.version()
        self.version_ = ".".join(str(self.current_version))
        self.setupUi(eyeonu)
        self.load_model()
        self.detected_objects = {}  
        self.allowed_classes = set()
        self.object_id_counter = 1 
        self.timer = QTimer(self.setupUi(eyeonu))
        self.timer.timeout.connect(self.update_frame)

    def setupUi(self, eyeonu):
        self.configs = {"notify": 0,
                        "url": "",
                        "tel": "",
                        "email": "",
                        "sparam": "",
                        "fps": 30
                        }
        self.load_configs()
        self.checkboxes = []

        self.msgbox = QMessageBox()
        self.msgbox.setIcon(QMessageBox.Information)
        self.msgbox.setWindowTitle("Güncelleme Kontrolü")
        self.msgbox.setStandardButtons(QMessageBox.Ok)
        self.msgbox.setWindowIcon(QtGui.QIcon(":/sources/icon.png"))
        # self.msgbox.setText("Güncelleme Kontrolü Yapılıyor...")
        # self.msgbox.setInformativeText("Güncelleme kontrolü yapılıyor...")

        self.msgbox2 = QMessageBox()
        self.msgbox2.setIcon(QMessageBox.Information)
        self.msgbox2.setWindowTitle("Güncelleme Kontrolü")
        self.msgbox2.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        self.msgbox2.setWindowIcon(QtGui.QIcon(":/sources/icon.png"))
        

        eyeonu.setObjectName("eyeonu")
        eyeonu.resize(660, 563)
        eyeonu.setMinimumSize(QtCore.QSize(660, 563))
        eyeonu.setMaximumSize(QtCore.QSize(660, 563))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/sources/icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        eyeonu.setWindowIcon(icon)
        self.scanscreen = QtWidgets.QWidget(eyeonu)
        self.scanscreen.setObjectName("scanscreen")
        self.video_label = QtWidgets.QLabel(self.scanscreen)
        self.video_label.setGeometry(QtCore.QRect(10, 30, 640, 480))
        self.video_label.setAutoFillBackground(True)
        self.video_label.setFrameShape(QtWidgets.QFrame.Box)
        self.video_label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.video_label.setLineWidth(2)
        self.video_label.setText("")
        self.video_label.setPixmap(QtGui.QPixmap(":/sources/icon.png"))
        self.video_label.setScaledContents(True)
        self.video_label.setAlignment(QtCore.Qt.AlignCenter)
        self.video_label.setObjectName("video_label")

        self.stop_button = QtWidgets.QPushButton(self.scanscreen)
        self.stop_button.setGeometry(QtCore.QRect(10, 0, 641, 23))
        self.stop_button.setObjectName("stop_button")
        self.start_button = QtWidgets.QPushButton(self.scanscreen)
        self.start_button.setGeometry(QtCore.QRect(10, 0, 641, 23))
        self.start_button.setObjectName("start_button")

        self.settingscreen = QtWidgets.QWidget(self.scanscreen)
        self.settingscreen.setEnabled(True)
        self.settingscreen.setGeometry(QtCore.QRect(10, 0, 641, 511))
        self.settingscreen.setAutoFillBackground(True)
        self.settingscreen.setObjectName("settingscreen")
        self.label = QtWidgets.QLabel(self.settingscreen)
        self.label.setGeometry(QtCore.QRect(10, 0, 621, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.settingscreen)
        self.label_2.setGeometry(QtCore.QRect(10, 270, 611, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.settingscreen)
        self.lineEdit.setGeometry(QtCore.QRect(10, 290, 621, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.settingscreen)
        self.lineEdit_2.setGeometry(QtCore.QRect(10, 340, 301, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_3 = QtWidgets.QLabel(self.settingscreen)
        self.label_3.setGeometry(QtCore.QRect(10, 320, 301, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.settingscreen)
        self.label_4.setGeometry(QtCore.QRect(10, 370, 301, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.settingscreen)
        self.lineEdit_3.setGeometry(QtCore.QRect(10, 390, 301, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton = QtWidgets.QPushButton(self.settingscreen)
        self.pushButton.setGeometry(QtCore.QRect(400, 370, 191, 101))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton.setFont(font)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/sources/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon1)
        self.pushButton.setIconSize(QtCore.QSize(32, 32))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.settingscreen)
        self.lineEdit_4.setGeometry(QtCore.QRect(10, 440, 301, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")

        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_50 = QtWidgets.QLabel(self.settingscreen)
        self.label_50.setGeometry(QtCore.QRect(10, 470, 301, 16))
        self.label_50.setFont(font)
        self.label_50.setObjectName("label_50")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.settingscreen)
        self.lineEdit_5.setGeometry(QtCore.QRect(10, 490, 100, 20))
        self.lineEdit_5.setObjectName("lineEdit_5")

        
        self.lineEdit.setText(self.configs["url"])
        self.lineEdit_2.setText(self.configs["tel"])
        self.lineEdit_3.setText(self.configs["email"])
        self.lineEdit_4.setText(self.configs["sparam"])
        self.lineEdit_5.setText(str(self.configs["fps"]))

        self.label_5 = QtWidgets.QLabel(self.settingscreen)
        self.label_5.setGeometry(QtCore.QRect(10, 420, 291, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.line = QtWidgets.QFrame(self.settingscreen)
        self.line.setGeometry(QtCore.QRect(10, 230, 621, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayoutWidget = QtWidgets.QWidget(self.settingscreen)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 20, 621, 201))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.checkbox_layout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.checkbox_layout.setContentsMargins(0, 0, 0, 0)
        self.checkbox_layout.setObjectName("checkbox_layout")
        self.alert_checkbox = QtWidgets.QCheckBox(self.settingscreen)
        self.alert_checkbox.setGeometry(QtCore.QRect(10, 250, 611, 17))
        if self.configs["notify"] == 1:
            self.alert_checkbox.setChecked(True)
        else:
            self.alert_checkbox.setChecked(False)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.alert_checkbox.setFont(font)
        self.alert_checkbox.setObjectName("alert_checkbox")
        self.objectsscreen = QtWidgets.QWidget(self.scanscreen)
        self.objectsscreen.setGeometry(QtCore.QRect(10, 0, 641, 521))
        self.objectsscreen.setAutoFillBackground(True)
        self.objectsscreen.setObjectName("objectsscreen")

        self.textBrowser = QtWidgets.QTextBrowser(self.objectsscreen)
        self.textBrowser.setGeometry(QtCore.QRect(10, 20, 621, 460))
        self.textBrowser.setObjectName("textBrowser")

        self.pushButton2 = QtWidgets.QPushButton(self.objectsscreen)
        self.pushButton2.setGeometry(QtCore.QRect(10, 485, 621, 23))
        self.pushButton2.setFont(font)
        icon_2 = QtGui.QIcon()
        icon_2.addPixmap(QtGui.QPixmap(":/sources/clear.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton2.setIcon(icon_2)
        self.pushButton2.setIconSize(QtCore.QSize(14, 14))
        self.pushButton2.setObjectName("pushButton2")

        self.label_6 = QtWidgets.QLabel(self.objectsscreen)
        self.label_6.setGeometry(QtCore.QRect(10, 0, 611, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.aboutscreen = QtWidgets.QWidget(self.scanscreen)
        self.aboutscreen.setGeometry(QtCore.QRect(10, 0, 641, 521))
        self.aboutscreen.setAutoFillBackground(True)
        self.aboutscreen.setObjectName("aboutscreen")

        self.pushButton3 = QtWidgets.QPushButton(self.aboutscreen)
        self.pushButton3.setGeometry(QtCore.QRect(10, 480, 350, 23))
        self.pushButton3.setFont(font)
        icon_3 = QtGui.QIcon()
        icon_3.addPixmap(QtGui.QPixmap(":/sources/update.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton3.setIcon(icon_3)
        self.pushButton3.setIconSize(QtCore.QSize(14, 14))
        self.pushButton3.setObjectName("pushButton3")

        self.label_9 = QtWidgets.QLabel(self.aboutscreen)
        self.label_9.setGeometry(QtCore.QRect(10, 10, 621, 471))
        self.label_9.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_9.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_9.setWordWrap(True)
        self.label_9.setOpenExternalLinks(False)
        self.label_9.setObjectName("label_9")
        self.label_7 = QtWidgets.QLabel(self.aboutscreen)
        self.label_7.setGeometry(QtCore.QRect(430, 480, 201, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.aboutscreen)
        self.label_8.setGeometry(QtCore.QRect(390, 480, 41, 21))
        self.label_8.setText("")
        self.label_8.setPixmap(QtGui.QPixmap(":/sources/github.png"))
        self.label_8.setScaledContents(True)
        self.label_8.setObjectName("label_8")
        self.video_label.raise_()
        self.stop_button.raise_()
        self.start_button.raise_()
        self.objectsscreen.raise_()
        self.settingscreen.raise_()
        self.aboutscreen.raise_()
        eyeonu.setCentralWidget(self.scanscreen)
        self.menubar = QtWidgets.QMenuBar(eyeonu)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 660, 30))
        self.menubar.setMinimumSize(QtCore.QSize(0, 30))
        self.menubar.setMaximumSize(QtCore.QSize(16777215, 30))
        self.menubar.setObjectName("menubar")
        self.menusetting = QtWidgets.QMenu(self.menubar)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/sources/setting.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menusetting.setIcon(icon2)
        self.menusetting.setObjectName("menusetting")
        self.menuabout = QtWidgets.QMenu(self.menubar)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/sources/info.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuabout.setIcon(icon3)
        self.menuabout.setObjectName("menuabout")
        self.menuscan = QtWidgets.QMenu(self.menubar)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/sources/scan.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuscan.setIcon(icon4)
        self.menuscan.setObjectName("menuscan")
        self.menuobjects = QtWidgets.QMenu(self.menubar)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/sources/objects.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuobjects.setIcon(icon5)
        self.menuobjects.setObjectName("menuobjects")
        eyeonu.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(eyeonu)
        self.statusbar.setObjectName("statusbar")
        eyeonu.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuscan.menuAction())
        self.menubar.addAction(self.menuobjects.menuAction())
        self.menubar.addAction(self.menusetting.menuAction())
        self.menubar.addAction(self.menuabout.menuAction())

        with open(MODEL_NAMES, "r", encoding="utf-8") as f:
            self.classes = [line.strip() for line in f.readlines()]
        
        for index, cls in enumerate(self.classes):
            cb = QtWidgets.QCheckBox(cls)
            cb.stateChanged.connect(self.update_allowed_classes)
            self.checkboxes.append(cb)
            row, col = divmod(index, 8)  
            self.checkbox_layout.addWidget(cb, row, col)

        self.retranslateUi(eyeonu)
        QtCore.QMetaObject.connectSlotsByName(eyeonu)

        self.capture = cv2.VideoCapture(0)
        

    def retranslateUi(self, eyeonu):
        _translate = QtCore.QCoreApplication.translate
        eyeonu.setWindowTitle(_translate("eyeonu", "Gözüm Üstünde - UltraAI by Ultrareflex"))
        self.stop_button.setText(_translate("eyeonu", "🔴 Taramayı Durdur"))
        self.start_button.setText(_translate("eyeonu", "📸 Taramayı Başlat"))
        self.label.setText(_translate("eyeonu", "Algınlamasını istediğiniz objeleri seçin:"))
        self.label_2.setText(_translate("eyeonu", "Bildirim URL \'si"))
        self.lineEdit.setPlaceholderText(_translate("eyeonu", "Örn: https://www.hizmetimiz.com/bildirimler"))
        self.lineEdit_2.setPlaceholderText(_translate("eyeonu", "Örn: 5424102268"))
        self.label_3.setText(_translate("eyeonu", "Telefon No: (http://bildirim-urlsi?tel={})"))
        self.label_4.setText(_translate("eyeonu", "E-Mail: (http://bildirim-urlsi?mail={})"))
        self.label_50.setText(_translate("eyeonu", "FPS:"))
        self.lineEdit_3.setPlaceholderText(_translate("eyeonu", "Örn: ultrareflex@ultrareflex.com"))
        self.pushButton.setText(_translate("eyeonu", " KAYDET"))
        self.pushButton2.setText(_translate("eyeonu", " KAYDI TEMİZLE"))
        self.pushButton3.setText(_translate("eyeonu", " GÜNCELLEŞTİRME KONTROLÜ YAP"))
        self.lineEdit_4.setPlaceholderText(_translate("eyeonu", "Örn: kamera3"))
        self.label_5.setText(_translate("eyeonu", "Özel Parametre: (http://bildirim-urlsi?sparam={})"))
        self.alert_checkbox.setText(_translate("eyeonu", "Bildirimler Aktif"))
        self.label_6.setText(_translate("eyeonu", "Olay Kaydı"))
        self.label_9.setText(_translate("eyeonu", f"""

<div align="center"><h1>🛡️ EyeOnU - Uygulama Hakkında 🛡️</h1></div>

<h3>📌 **Versiyon:** </h3> `{self.version_}`  
<h3>👨‍💻 **Geliştirici:** </h3> `Kemal Burak YILDIRIM`  
<h3>🔗 **GitHub:** </h3> [Ultrareflex8672](https://github.com/Ultrareflex8672)  
<h3>📧 **E-Posta:** </h3> ultrareflex@ultrareflex.com  
<h3>📂 **Proje Sayfası:** </h3> [EyeOnU GitHub](https://github.com/Ultrareflex8672/EyeOnU)

----------

<h2>🎯 **EyeOnU Nedir?**</h2>

**EyeOnU**, kamera görüntüsünden **gerçek zamanlı nesne algılama** ve **anlık bildirim gönderme** amacıyla geliştirilmiş bir yapay zeka tabanlı izleme yazılımıdır. **PyQt5** ile oluşturulan kullanıcı dostu arayüzü sayesinde kolay ve etkili bir kullanım sunar.

🔹 **📷 Nesne Tespiti:** Kamera görüntüsünü analiz ederek önceden belirlenen nesneleri tespit eder.  
🔹 **🌍 Anlık Bildirim:** Algılanan nesneleri belirlenen **URL**'ye gönderir.  
🔹 **⚡ Ayarlanabilir FPS:** Performansı optimize etmek için FPS değerini değiştirme imkanı.  
🔹 **📜 Olay Kaydı ve Log:** Tüm tespit edilen nesneler kayıt altına alınır.  
🔹 **🖥️ Kullanıcı Dostu Arayüz:** Basit, anlaşılır ve hızlı bir deneyim sunar.

🛠️ **Destek ve Geri Bildirim İçin:** Lütfen **GitHub** sayfamızı ziyaret edin ve katkılarınızı paylaşın! 🚀
"""))
        self.label_7.setText(_translate("eyeonu", "Developer: Kemal Burak YILDIRIM"))
        self.menusetting.setTitle(_translate("eyeonu", "ayar"))
        self.menuabout.setTitle(_translate("eyeonu", "about"))
        self.menuscan.setTitle(_translate("eyeonu", "tara"))
        self.menuobjects.setTitle(_translate("eyeonu", "objects"))

    def load_model(self):
        self.net = cv2.dnn.readNet(MODEL_WEIGHTS, MODEL_CONFIG)
        self.layer_names = self.net.getLayerNames()
        self.output_layers = [self.layer_names[int(i) - 1] for i in self.net.getUnconnectedOutLayers()]

    def update_allowed_classes(self):
        self.allowed_classes = {cb.text() for cb in self.checkboxes if cb.isChecked()}

    def start_camera(self):
        self.start_button.hide()
        self.stop_button.show()
        self.timer.start(1000/int(self.configs["fps"]))
        log_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.textBrowser.append(f"{log_time} - Tarama başlatıldı.")
        self.log_event(f"{log_time} - Tarama başlatıldı.\n")
    
    def stop_camera(self):
        self.start_button.show()
        self.stop_button.hide()
        self.video_label.setPixmap(QtGui.QPixmap(":/sources/icon.png"))
        self.statusbar.showMessage("Taramaya hazır...")
        self.timer.stop()
        log_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.textBrowser.append(f"{log_time} - Tarama durduruldu.")
        self.log_event(f"{log_time} - Tarama durduruldu.\n")

    def update_frame(self):
        ret, frame = self.capture.read()
        if not ret:
            return
        
        height, width, _ = frame.shape
        blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        self.net.setInput(blob)
        outs = self.net.forward(self.output_layers)
        
        new_objects = []
        
        for out in outs:
            for detection in out:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > 0.5:
                    center_x, center_y, w, h = (detection[:4] * [width, height, width, height]).astype("int")
                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)
                    class_name = self.classes[class_id]

                    if class_name in self.allowed_classes:
                        new_objects.append((class_name, x, y, w, h))
        
        
        for obj in new_objects:
            class_name, x, y, w, h = obj
            detected_before = False
            new_id = None  

            
            for prev_obj in self.detected_objects.values():
                prev_class, prev_x, prev_y, prev_w, prev_h, prev_id = prev_obj
                distance = np.sqrt((x - prev_x) ** 2 + (y - prev_y) ** 2)
                if class_name == prev_class and distance < 100:  
                    detected_before = True
                    new_id = prev_id 
                    break
            
            if not detected_before:
                new_id = self.object_id_counter
                self.detected_objects[new_id] = (class_name, x, y, w, h, new_id)
                self.object_id_counter += 1
                self.log_detection(class_name, new_id)
            
           
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(frame, f"{class_name} ID: {new_id}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        # if self.alert_checkbox.isChecked():
        #     self.video_label.show()
        #     frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        #     h, w, ch = frame.shape
        #     qimg = QImage(frame.data, w, h, ch * w, QImage.Format_RGB888)
        #     self.video_label.setPixmap(QPixmap.fromImage(qimg))
        # else:
        #     self.video_label.hide()
        
        self.video_label.show()
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        h, w, ch = frame.shape
        qimg = QImage(frame.data, w, h, ch * w, QImage.Format_RGB888)
        self.video_label.setPixmap(QPixmap.fromImage(qimg))
        self.statusbar.showMessage("Taranıyor...")

    def log_detection(self, label, object_id):
        log_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{log_time} - {label} (ID: {object_id}) görüntüye girdi.\n"
        self.textBrowser.append(log_entry)
        self.statusbar.showMessage(log_entry)
        with open("detections.log", "a", encoding="utf-8") as log_file:  # UTF-8 ile log dosyasına yazma
            log_file.write(log_entry)

        # Eğer uyarı gönderme checkbox'ı işaretli ise, telefon numarasına uyarı gönder
        if self.alert_checkbox.isChecked():
            phone_number = self.lineEdit_2.text()
            url_ = self.lineEdit.text()
            email = self.lineEdit_3.text()
            sparam = self.lineEdit_4.text()
            self.send_alert(label, object_id, log_time, url_, phone_number, email, sparam)
        

    def send_alert(self, label, object_id, log_time, url_=None, phone_number=None, email=None, sparam=None):
        log_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        if url_:
            url = f"{url_}?nesne={label}&id={object_id}&zaman={log_time}&tel={phone_number}&mail={email}&sparam={sparam}"
            try:
                response = requests.get(url)
                if response.status_code == 200:
                    # print("Bildirim gönderildi.")
                    self.textBrowser.append(f"{log_time} - Bildirim gönderildi. - ({url})")
                    self.log_event(f"{log_time} - Bildirim gönderildi. - ({url})\n")
                    self.statusbar.showMessage("Bildirim gönderildi")
                else:
                    # print(f"Bildirim gönderilemedi: {response.status_code}")
                    self.textBrowser.append(f"{log_time} - Bildirim gönderilemedi: {response.status_code}")
                    self.log_event(f"{log_time} - Bildirim gönderilemedi: {response.status_code}\n")
                    self.statusbar.showMessage("Bildirim gönderilemedi")
            except Exception as e:
                self.textBrowser.append(f"{log_time} - Bildirim gönderim hatası: {e}")
                self.log_event(f"{log_time} - Bildirim gönderim hatası: {e}\n")

    def log_event(self, event):
        with open("log.log", "a", encoding="utf-8") as log_file:  # UTF-8 ile log dosyasına yazma
            log_file.write(event)

    def clear_log(self):
        self.textBrowser.clear()

    def save_configs(self):
        with open("config.cfg", "w") as file:
            json.dump(self.configs, file)

    def load_configs(self):
        log_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        try:
            with open("config.cfg", "r") as file:
                self.configs = json.load(file)
            # self.textBrowser.append(f"{log_time} - Gözüm Üstünde Uygulaması Başlatıldı ve Ayarlar Başarı ile Yüklendi.")
            self.log_event(f"{log_time} - Gözüm Üstünde Uygulaması Başlatıldı ve Ayarlar Başarı ile Yüklendi.\n")
        except FileNotFoundError:
            # self.textBrowser.append(f"{log_time} - Gözüm Üstünde Uygulaması Başlatıldı Ancak Ayarlar Yüklenemedi.")
            self.log_event(f"{log_time} - Gözüm Üstünde Uygulaması Başlatıldı Ancak Ayarlar Yüklenemedi.\n")

    def update_configs(self, var_name, new_value):
        log_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = ""
        if var_name in self.configs:
            if self.configs[var_name] != new_value:
                self.configs[var_name] = new_value
                self.save_configs()
                if var_name == "notify" and new_value == 1:
                    message = "Bildirimler açık olarak ayar kaydedildi"
                elif var_name == "notify" and new_value == 0:
                    message = "Bildirimler kapalı olarak ayar kaydedildi"
                if var_name == "url":
                    message = f"Bildirim URL 'si '{new_value}' olarak ayar kaydedildi."
                if var_name == "tel":
                    message = f"Telefon parametresi '{new_value}' olarak ayar kaydedildi."
                if var_name == "email":
                    message = f"E-Posta parametresi '{new_value}' olarak ayar kaydedildi."
                if var_name == "sparam":
                    message = f"Özel parametre '{new_value}' olarak ayar kaydedildi."
                if var_name == "fps":
                    message = f"Görüntü yenileme hızı (FPS) saniyede '{new_value}' kare olarak ayar kaydedildi."
                print(message)
                self.textBrowser.append(f"{log_time} - {message}")
                self.log_event(f"{log_time} - {message}\n")
        else:
            self.textBrowser.append(f"{log_time} - Ayarlar kaydedilemesi: Parametre Hatası")
            self.log_event(f"{log_time} - Ayarlar kaydedilemesi: Parametre Hatası\n")

    def update_configs_(self):
        if self.alert_checkbox.isChecked():
            self.update_configs("notify", 1)
        else:
            self.update_configs("notify", 0)
        self.update_configs("url", self.lineEdit.text())
        self.update_configs("tel", self.lineEdit_2.text())
        self.update_configs("email", self.lineEdit_3.text())
        self.update_configs("sparam", self.lineEdit_4.text())
        self.update_configs("fps", self.lineEdit_5.text())

    def closeEvent(self, event):
        self.capture.release()
        event.accept()

    def scan_screen(self):
        self.objectsscreen.hide()
        self.settingscreen.hide()
        self.aboutscreen.hide()
        self.statusbar.showMessage("Hazır...")

    def objects_screen(self):
        self.objectsscreen.show()
        self.settingscreen.hide()
        self.aboutscreen.hide()
        self.statusbar.showMessage("Logs...")

    def setting_screen(self):
        self.objectsscreen.hide()
        self.settingscreen.show()
        self.aboutscreen.hide()
        self.statusbar.showMessage("Ayarlanıyor...")

    def about_screen(self):
        self.aboutscreen.show()
        self.objectsscreen.hide()
        self.settingscreen.hide()
        self.statusbar.showMessage("Hakkında...")

    def update(self):
        self.msgbox.setText("Güncelleme Kontrolü Yapılıyor...")
        self.msgbox.show()
        # self.msgbox.hide()
        new_version, current_version = self.updater.version()
        if new_version > current_version:
            self.msgbox2.setText("Güncelleme Bulundu")
            self.msgbox2.setInformativeText(f"{new_version} numarlı yeni versiyon bulundu! Şimdi güncellemek ister misiniz?")
            self.msgbox.hide()
            # self.msgbox2.show()
            reply = self.msgbox2.exec_()
        else:
            self.msgbox.setText(f"EyeOnU V{self.version_} sürümü ile güncel durumda!")
            self.msgbox.show()
            reply = ""

        if reply == 16384:
            self.msgbox2.hide()
            
            if os.name == "nt":  # Windows için "nt"
                try:
                    try:
                        if sys.platform.startswith("win"):
                            os.system(f"taskkill /F /IM EOU_updater.exe 2>nul")
                        else:
                            os.system(f"pkill -f EOU_updater.exe 2>/dev/null")
                    except Exception as e:
                        self.msgbox.setText("❌ Hata oluştu: "+str(e))
                        self.msgbox.show()

                    if getattr(sys, 'frozen', False):
                        temp_dir = os.path.join(os.path.dirname(sys.executable), "EOU_updater")
                        main_dir = os.path.dirname(sys.executable)
                        exe_path = os.path.join(os.path.dirname(sys.executable), "EOU_updater", "EOU_updater.exe")
                        exe_path2 = os.path.join(os.path.dirname(sys.executable), "EOU_updater.exe")
                        
                    else:
                        temp_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "EOU_updater"))
                        main_dir = os.path.abspath(os.path.join(os.path.dirname(__file__)))
                        exe_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "EOU_updater", "EOU_updater.exe"))
                        exe_path2 = os.path.abspath(os.path.join(os.path.dirname(__file__), "EOU_updater.exe"))
                        
                    
                    if os.path.exists(exe_path2):
                        if not os.path.exists(temp_dir):
                            os.makedirs(temp_dir)
                        try:
                            shutil.copy2(exe_path2, exe_path)
                        except:
                            self.msgbox.setText("❌ Hata oluştu")
                            self.msgbox.show()
                        print(f"▶️ EOU_updater for Windows Çalıştırılıyor: {exe_path}")
                        print("🔄 EyeOnU Güncelleştirme Hizmeti Başlatıldı!")
                        print("| 0%")
                        process = subprocess.Popen(exe_path, shell=True)
                        process.wait()  # İşlem tamamlanana kadar bekle
                    elif os.path.exists(exe_path):
                        print("⚠️ EyeOnU Ana Updater Hizmeti Bulunamadı!")
                        print(f"▶️ EOU_updater for Windows Yedek Hizmet Çalıştırılıyor: {exe_path}")
                        print("🔄 EyeOnU Güncelleştirme Hizmeti Başlatıldı!")
                        print("| 0%")
                        process = subprocess.Popen(exe_path, shell=True)
                        process.wait()  # İşlem tamamlanana kadar bekle
                    else:
                        raise Exception("'EOU_updater.exe' bulunamadı!")
                except Exception as e:
                    self.msgbox.setText("❌ Hata oluştu: "+str(e))
                    self.msgbox.show()
                    # input("Devam etmek için Enter'a basın... ➡️")
        else:
            self.msgbox2.hide()

import resource_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    eyeonu = QtWidgets.QMainWindow()
    ui = Ui_eyeonu()
    ui.setupUi(eyeonu)
    ui.settingscreen.hide()
    ui.objectsscreen.hide()
    ui.aboutscreen.hide()
    ui.stop_button.hide()
    ui.menuscan.aboutToShow.connect(ui.scan_screen)
    ui.menusetting.aboutToShow.connect(ui.setting_screen)
    ui.menuobjects.aboutToShow.connect(ui.objects_screen)
    ui.menuabout.aboutToShow.connect(ui.about_screen)
    ui.start_button.clicked.connect(ui.start_camera)
    ui.stop_button.clicked.connect(ui.stop_camera)
    ui.pushButton.clicked.connect(ui.update_configs_)
    ui.pushButton2.clicked.connect(ui.clear_log)
    ui.pushButton3.clicked.connect(ui.update)
    ui.statusbar.showMessage("Hazır...")
    eyeonu.show()
    sys.exit(app.exec_())
